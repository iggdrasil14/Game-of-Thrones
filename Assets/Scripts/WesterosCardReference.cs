using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class WesterosCardReference : MonoBehaviour
{
    public int nightWatchPower = 0;         // Сила армии Ночного дозора.
    public int[] supportHousePower = new int[5];
    public int supportStarkPower;           // Сила подмоги от Дома Старков.
    public int supportGreyjoyPower;         // Сила подмоги от Дома Грейджоев.
    public int supportLannisterPower;       // Сила подмоги от Дома Ланнистеров.
    public int supportTyrellPower;          // Сила подмоги от Дома Тиреллов.
    public int supportMartellPower;         // Сила подмоги от Дома Мартеллов.
    public int supportBaratheonPower;       // Сила подмоги от Дома Баратеонов.
    public int wildlingsAttackPower = 0;    // Сила армии Одичалых.
    public bool isVictory;                  // Флаг, если армия Ночного дозора победила.
    public void I_WinterIsComing()          // Зима близко.
    {
        // Описание из правил:
        // Перетасуйте эту колоду Вестероса (вместе с этой картой).
        // Вытяните и разыграйте новую карту (с учетом возможного знака одичалых).
        // Если это снова "Зима близко", повторите.

        // Текст на карте:
        // Зима близко
        // "Немедленно перетасуйте эту колоду.
        // Затем вскройте и разыграйте новую карту."

        // Количество карт этого типа в колоде I - 1.
    }

    public void I_LastDaysOfSummer()        // Последние дни лета.
    {
        // Описание из правил:
        // Ничего не происходит. Переходите к следующей карте Вестероса.

        // Текст на карте:
        // Последние дни лета
        // "Ничего не происходит."

        // Количество карт этого типа в колоде I - 1.

        wildlingsAttackPower++;             // Знак одичалых на карте. Сила одичалых увеличивается на 2.
        IsWildingsAttack();                 // Метод проверяет началось ли нашествие Одичалых.
    }

    public void I_Mustering()               // Сбор войск.
    {
        // Описание из правил:
        // Каждый Дом в порядке хода создаёт новые отряды в землях с крепостями и замками.

        // Текст на карте:
        // Сбор войск
        // "Дома создают новые отряды в крепостях и замках."

        // Количество карт этого типа в колоде I - 3.
    }

    public void I_Supply()                  // Снабжение.
    {
        // Описание из правил:
        // Каждый Дом в порядке хода сдвигает жетон по треку снабжения и изменяет количество
        // и численность войск, чтобы соответствовать новому ровню снабжения.

        // Текст на карте:
        // Снабжение
        // "Переместите жетоны на треке снабжения.
        // Дома сокращают или распускают войска, которые не могут содержать."

        // Количество карт этого типа в колоде I - 3.
    }

    public void I_AThroneOfBlades()         // Трон клинков.
    {
        // Описание из правил:
        // Владелез Железного трона выбирает один из трех вариантов:
        // а) все Дома пересчитывают снабжение и меняют количество и состав войск (аналогично карте "Снабжение";
        // б) все Дома собирают войска (аналогично карте "Сбор войск");
        // в) ничего не происходит (аналогично карте "Последние дни лета").

        // Текст на карте:
        // Трон из клинков
        // "Владелец Железного трона приказывает всем Домам либо:
        // а) изменить снабжение и состав войск, либо
        // б) собрать войска, либо
        // в) отдыхать, так как ничего не происходит."

        // Количество карт этого типа в колоде I - 2.

        wildlingsAttackPower++;             // Знак одичалых на карте. Сила одичалых увеличивается на 2.
        IsWildingsAttack();                 // Метод проверяет началось ли нашествие Одичалых.
    }

    public void II_WinterIsComing()         // Зима близко.
    {
        // Описание из правил:
        // Перетасуйте эту колоду Вестероса (вместе с этой картой).
        // Вытяните и разыграйте новую карту (с учетом возможного знака одичалых).
        // Если это снова "Зима близко", повторите.

        // Текст на карте:
        // Зима близко
        // "Немедленно перетасуйте эту колоду.
        // Затем вскройте и разыграйте новую карту."

        // Количество карт этого типа в колоде II - 1.
    }

    public void II_LastDaysOfSummer()       // Последние дни лета.
    {
        // Описание из правил:
        // Ничего не происходит. Переходите к следующей карте Вестероса.

        // Текст на карте:
        // Последние дни лета
        // "Ничего не происходит."

        // Количество карт этого типа в колоде II - 1.

        wildlingsAttackPower++;             // Знак одичалых на карте. Сила одичалых увеличивается на 2.
        IsWildingsAttack();                 // Метод проверяет началось ли нашествие Одичалых.
    }

    public void II_GameOfThrones()          // Игра престолов.
    {
        // Описание из правил:
        // Каждый Дом в порядке хода берёт из резерва власти один жетон за каждый знак короны в подвластных ему землях.
        // Также Дом берёт жетон власти за каждый свой порт с кораблём, если в смежном с портом море нет врага.

        // Текст на карте:
        // Игра престолов
        // "Каждый Дом получает по одному жетону власти за каждый знак короны в подвластных землях."

        // Количество карт этого типа в колоде II - 3.
    }

    public void II_ClashOfKings()           // Битва королей.
    {
        // Описание из правил:
        // Снимите все жетоны с треков влияния.
        // Затем Дома вступают в борьбу за влияние на каждом треке, начиная с Железного трона.

        // Текст на карте:
        // Битва королей
        // "Все дома вступают в борьбу за влияние."

        // Количество карт этого типа в колоде II - 3.
    }

    public void II_DarkWingsDarkWords()     // Чёрные крылья, чёрные слова.
    {
        // Описание из правил:
        // Владеоец Посыльного ворона выбирает один из трёх вариантов:
        // а) все Дома вступают в борьбу за влияние (аналогично карте "Битва королей");
        // б) все Дома собирают власть с подвластных земель, в которых есть знак короны (аналогично карте "Игра престолов");
        // в) ничего не происходит (аналогично карте "Последние дни лета").

        // Текст на карте:
        // Чёрные крылья, чёрные слова
        // "Владелец посыльного ворона приказывает всем Домам либо
        // а) вступить в борьбу за влияние, либо
        // б) собрать жетоны власти со всех подвластных земель со знаками короны, либо
        // в) расслабляться, так как ничего не происходит.

        // Количество карт этого типа в колоде II - 2.

        wildlingsAttackPower++;             // Знак одичалых на карте. Сила одичалых увеличивается на 2.
        IsWildingsAttack();                 // Метод проверяет началось ли нашествие Одичалых.
    }

    public void III_WildlingsAttack()       // Нашествие одичалых.
    {
        // Описание из правил:
        // Одичалые атакую Вестерос. Опасность нашествия указана на треке одичалых.
        // Дома применяют власть, чтобы усилить Ночной дозор и отбить вторжение.

        // Текст на карте:
        // Нашествие одичалых
        // "Одичалые наступают на земли Вестероса."

        // Количество карт этого типа в колоде III - 3.

        if (nightWatchPower < wildlingsAttackPower)
        {
            Debug.Log("Победа Одичалых!");
            isVictory = false;
        }
        if (nightWatchPower >= wildlingsAttackPower)
        {
            Debug.Log("Победа Ночного дозора!");
            isVictory = true;
        }
    }

    public void III_RainsOfAutumm()         // Дожди осени.
    {
        // Описание из правил:
        // В фазе замыслов этого раунда игроки не могут отдавать особые приказы похода +1.

        // Текст на карте:
        // Дожди осени
        // "В этой фазе замыслов нельзя отдавать приказы похода +1."

        // Количество карт этого типа в колоде III - 1.

        wildlingsAttackPower++;             // Знак одичалых на карте. Сила одичалых увеличивается на 2.
        IsWildingsAttack();                 // Метод проверяет началось ли нашествие Одичалых.
    }

    public void III_StormOfSwords()         // Буря мечей.
    {
        // Описание из правил:
        // В фазе замыслов этого раунда игроки не могут отдавать приказы обороны (ни простые, ни особые).

        // Текст на карте:
        // Буря мечей
        // "В этой фазе замыслов нельзя отдавать приказы обороны."

        // Количество карт этого типа в колоде III - 1.

        wildlingsAttackPower++;             // Знак одичалых на карте. Сила одичалых увеличивается на 2.
        IsWildingsAttack();                 // Метод проверяет началось ли нашествие Одичалых.
    }

    public void III_SeaOfStorms()           // Море штормов.
    {
        // Описание из правил:
        // В фазе замыслов этого раунда игроки не могут отдавать приказы набега (ни простые, ни особые).

        // Текст на карте:
        // Море штормов
        // "В этой фазе замыслов нельзя отдавать приказы набега.

        // Количество карт этого типа в колоде III - 1.

        wildlingsAttackPower++;             // Знак одичалых на карте. Сила одичалых увеличивается на 2.
        IsWildingsAttack();                 // Метод проверяет началось ли нашествие Одичалых.
    }

    public void III_FeastOfCrows()          // Пир для воронов.
    {
        // Описание из правил:
        // В фазе замыслов этого раунда игроки не могут отдавать приказы усиления власти (ни простые, ни особые).

        // Текст на карте:
        // Пир для воронов
        // "В этой фазе замыслов нельзя отдавать приказы усиления власти."

        // Количество карт этого типа в колоде III - 1.

        wildlingsAttackPower++;             // Знак одичалых на карте. Сила одичалых увеличивается на 2.
        IsWildingsAttack();                 // Метод проверяет началось ли нашествие Одичалых.
    }

    public void III_WebOfLies()             // Паутина лжи.
    {
        // Описание из правил:
        // В фазе замыслов этого раунда игроки не могут отдавать приказы подмоги (ни простые, ни особые).

        // Текст на карте:
        // Паутина лжи
        // "В этой фазе нельзя отдавать приказы подмоги."

        // Количество карт этого типа в колоде III - 1.

        wildlingsAttackPower++;             // Знак одичалых на карте. Сила одичалых увеличивается на 2.
        IsWildingsAttack();                 // Метод проверяет началось ли нашествие Одичалых.
    }

    public void III_PutToTheSword()         // Преданы мечу.
    {
        // Описание из правил:
        // Владелец Валирийского меча выбирает один из трех вариантов:
        // а) в фазе замыслов этого раунда не отдаются приказы обороны (аналогично карте "Буря мечей");
        // б) в фазе замыслов этого раунда не отдаются приказы похода +1 (аналогично карте "Дожди осени");
        // в) ничего не происходит (аналогично карте "Последние дни лета").

        // Текст на карте:
        // Преданы мечу
        // Владелец Валирийского меча выбирает одно из условий для этой фазы замыслов:
        // а) не отдаются приказы обороны;
        // б) не отдаются приказы похода +1;
        // в) ограничений нет.

        // Количество карт этого типа в колоде III - 2.
    }

    /// <summary>
    /// Метод проверяет началось ли нашествие одичалых.
    /// </summary>
    public void IsWildingsAttack()
    {
        if (wildlingsAttackPower >= 12)     // Если значение силы одичалых достигло 12, то разыгрывается событие аналогичное карте "Нашесткие одичалых".
        {
            III_WildlingsAttack();
        }
    }
    /// <summary>
    /// Метод определяет суммарную мощь армии Ночного дозора на основе поддержки Великих Домов.
    /// </summary>
    public void NightWatchPower()
    {
        // Для теста сила подмоги определяется случайным образом.
        int[] supportHousePower = { Random.Range(0, 5) };
        // Сила армии Ночного дозора.
        int nightWatchPower = supportHousePower.Sum();

        // Нахождение минимального и максимального значения
        int min = supportHousePower[0];
        int max = supportHousePower[0];

        //
        for (int i = 1; i < supportHousePower.Length; i++)
        {
            if (supportHousePower[i] < min)
                min = supportHousePower[i];

            if (supportHousePower[i] > max)
                max = supportHousePower[i];
        }
    }
}
